@import Main._
@import scalafix.Readme._
@import scalafix.rewrite._

@sect{Rewrites}
  @p
    Scalafix comes with a few rewrites out-of-the-box.
    These rewrites have been chosen to meet the long-term goal of scalafix to
    @lnk("clarify the Scala to Dotty migration path",
        "http://scala-lang.org/blog/2016/05/30/scala-center-advisory-board.html#the-first-meeting").
    To create custom rewrites, see @sect.ref{scalafix-core}.

  @sect(ExplicitImplicit.toString)
    Dotty requires implicit @code{val}s and @code{def}s to explicitly annotate
    return types.
    The @ExplicitImplicit.toString rewrite inserts the inferred type from the
    compiler for implicit definitions that are missing an explicit return type.
    For example,

    @hl.scala
      // before
      implicit val tt = liftedType
      // after
      implicit val tt: TypedType[R] = liftedType

    @ul
      @li
        @note. This rewrite is new and may insert an ambiguous type name in rare cases.
        For example, running ExplicitImplicit (as of v0.2.0) on the Scala.js repo
        did introduce compilation errors.
      @li
        scalafix tries to minimize the inserted type signature, by using
        available variable names in scope.
      @li
        scalafix will insert the fully qualified type name if the type
        is not in scope.

  @sect(ProcedureSyntax.toString)
    "Procedure syntax" is not supported in Dotty.
    Methods that use procedure syntax should use regular method syntax instead.
    For example,

    @hl.scala
      // before: procedure syntax
      def main(args: Seq[String]) {
        println("Hello world!")
      }
      // after: regular syntax
      def main(args: Seq[String]): Unit = {
        println("Hello world!")
      }

  @sect(VolatileLazyVal.toString)
    @p
      Adds a @code{@@volatile} annotation to lazy vals.
      The @code{@@volatile} annotation is needed to maintain thread-safe
      behaviour of lazy vals in Dotty.

    @hl.scala
      // before
      lazy val x = ...
      // after
      @@volatile lazy val x = ...

    @p
      With @code{@@volatile}, Dotty uses a deadlock free scheme that is
      comparable-if-not-faster than the scheme used in scalac.


  @sect{Planned rewrites...}
    See @lnk("here", "https://github.com/scalacenter/scalafix/issues?q=is%3Aissue+is%3Aopen+label%3Arewrite")
